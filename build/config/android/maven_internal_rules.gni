import("//build/config/android/config.gni")
import("//build/config/android/internal_rules.gni")
import("//build/config/android/rules.gni")

# inputs:
#   json_path
#
template("android_aar_internal") {
  assert(defined(invoker.json_path))

  _template_name = target_name
  _json_path = read_file(invoker.json_path, "json")
  _final_deps = []

  _deps = []
  if (defined(invoker.deps)) {
    _deps += invoker.deps
  }

  foreach(_target_config, _json_path.target_list) {
    target(_target_config.type, _target_config.name) {
      deps = _deps

      if (_target_config.type == "android_resources") {
        forward_variables_from(_target_config,
                               [
                                 "resource_dirs",
                                 "android_manifest",
                               ])
      } else if (_target_config.type == "java_prebuilt") {
        forward_variables_from(_target_config,
                               [
                                 "jar_path",
                                 "requires_android",
                                 "supports_android",
                               ])
      } else {
        assert(false, "type ${_target_config.type} is not supported.")
      }
    }

    _final_deps += [ ":${_target_config.name}" ]
  }

  java_group(_template_name) {
    deps = _final_deps
  }
}

# Declare a target for build an andorid aar archive.
#
# Variables:
#   aar_path: The andorid aar archive file to be processed.
#   maven_depname: The maven depname for the aar file.
#
# Example
#   android_aar() {
#     aar_path = "appcomat-1.1.0.aar"
#     maven_depname = "androidx.appcompat:appcompat:1.1.0"
#   }
template("process_android_aar") {
  assert(defined(invoker.aar_path))
  assert(defined(invoker.maven_depname))

  _template_name = target_name
  _base_path = "$target_gen_dir/${target_name}__android_aar"

  _json_path = _base_path + ".json"

  exec_script("//build/android/gn/generate_aar_targets.py",
              [
                "--name",
                _template_name,
                "--maven-depname",
                invoker.maven_depname,
                "--root-dir",
                rebase_path("//", root_build_dir),
                "--m2-home",
                rebase_path("//src/m2", root_build_dir),
                "--aar-path",
                rebase_path(invoker.aar_path, root_build_dir),
                "--json-path",
                rebase_path(_json_path, root_build_dir),
              ])

  android_aar_internal(_template_name) {
    forward_variables_from(invoker, [ "deps" ])
    json_path = _json_path
  }
}

template("android_maven_aar") {
  assert(defined(invoker.aar_path))
  assert(defined(invoker.maven_depname))

  not_needed(invoker, [ "maven_depname" ])
  if (maven_verbose) {
    print("maven: ${target_name}@${invoker.maven_depname}")
  }
  process_android_aar(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "aar_path",
                             "maven_depname",
                           ])
  }
}

template("android_maven_jar") {
  assert(defined(invoker.jar_path))
  assert(defined(invoker.maven_depname))

  not_needed(invoker, [ "maven_depname" ])
  if (maven_verbose) {
    print("maven: ${target_name}@${invoker.maven_depname}")
  }
  java_prebuilt(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "jar_path",
                           ])
    supports_android = true
  }
}

template("process_android_maven") {
  assert(defined(invoker.deps_list))

  _template_name = target_name
  _final_deps = []

  _maven_json_path =
      "$target_gen_dir/${target_name}__android_maven_metadata.json"
  _target_json_path =
      "$target_gen_dir/${target_name}__android_maven_targets.json"

  _artifact_list = []
  foreach(_artifact, invoker.deps_list) {
    _artifact_list += [
      "--artifact",
      _artifact,
    ]
  }

  exec_script("//build/android/gn/maven_download.py",
              [
                    "--m2-dir",
                    "../src/m2",
                    "--src-root",
                    "../",
                    "--output-json",
                    rebase_path(_maven_json_path, root_build_dir),
                    "--target-json",
                    rebase_path(_target_json_path, root_build_dir),
                  ] + _artifact_list,
              "")

  _target_json = read_file(_target_json_path, "json")

  foreach(_target_config, _target_json.deps_info) {
    _final_deps += [ ":${_target_config.name}" ]

    _target_type = _target_config.type

    _is_aar = _target_type == "android_maven_aar"
    _is_jar = _target_type == "android_maven_jar"

    if (_is_aar || _is_jar) {
      _file_path = _target_config.file_path
    }

    target(_target_config.type, _target_config.name) {
      forward_variables_from(_target_config, [ "deps" ])

      if (_is_aar || _is_jar) {
        maven_depname = _target_config.maven_depname
      }
      if (_is_aar) {
        aar_path = _file_path
      }
      if (_is_jar) {
        jar_path = _file_path
      }
    }
  }

  java_group(_template_name) {
    deps = _final_deps
  }
}

template("process_android_maven_depends") {
  assert(defined(invoker.deps_list))

  _args_list = []
  foreach(depname, invoker.deps_list) {
    _args_list += [
      "--depname",
      depname,
    ]
  }

  dep_config =
      exec_script("//build/android/gn/process_android_maven_depends.py",
                  _args_list,
                  "json")
  java_group(target_name) {
    deps = dep_config.deps
  }
}
