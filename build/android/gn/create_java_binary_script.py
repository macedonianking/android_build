#!python
#
# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Creates a simple script to run a java "binary".

This creates a script that sets up the java command line for running a java
jar. This includes correctly setting the classpath and the main class.
"""

import argparse

import os
import sys

from util import build_utils

# The java command must be executed in the current directory because there may
# be user-supplied paths in the args. The script receives the classpath relative
# to the directory that the script is written in and then, when run, must
# recalculate the paths relative to the current directory.
script_template = """\
#!python
#
# This file was generated by build/android/gyp/create_java_binary_script.py

import os
import sys

self_dir = os.path.dirname(__file__)
classpath = {classpath}
bootclasspath = {bootclasspath}
extra_program_args = {extra_program_args}
java_cmd = ["java"]
if bootclasspath:
    java_cmd.append("-Xbootclasspath/p:" + os.path.pathsep.join(bootclasspath))
java_cmd.extend(
    ["-classpath", os.path.pathsep.join(classpath), "-enableassertions", \"{main_class}\"])
java_cmd.extend(extra_program_args)
java_cmd.extend(sys.argv[1:])
os.execvp("java", java_cmd)
"""


def main(argv):
    argv = build_utils.expand_file_args(argv)
    parser = argparse.ArgumentParser(prog="create_java_binary_script.py")
    build_utils.add_depfile_option(parser)
    parser.add_argument('--output',
                        help='Output path for executable script.')
    parser.add_argument('--jar-path',
                        help='Path to the main jar.')
    parser.add_argument('--main-class',
                        help='Name of the java class with the "main" entry point.')
    parser.add_argument('--classpath',
                        action='append',
                        default=[],
                        help='Classpath for running the jar.')
    parser.add_argument('--bootclasspath', action='append', default=[],
                        help='zip/jar files to add to bootclasspath for java cmd.')
    parser.add_argument("extra_program_args", nargs="*")
    args = parser.parse_args(argv)
    if args.extra_program_args is None:
        args.extra_program_args = []

    classpath = [args.jar_path]
    for cp_arg in args.classpath:
        classpath += build_utils.parse_gyp_list(cp_arg)

    bootclasspath = []
    for bootcp_arg in args.bootclasspath:
        bootclasspath += build_utils.parse_gyp_list(bootcp_arg)

    bootclasspath = [os.path.abspath(p) for p in bootclasspath]
    classpath = [os.path.abspath(p) for p in classpath]

    with open(args.output, 'w') as script:
        script.write(script_template.format(
            classpath=repr(classpath),
            bootclasspath=repr(bootclasspath),
            main_class=args.main_class,
            extra_program_args=repr(args.extra_program_args)))

    os.chmod(args.output, 0o750)

    if args.depfile:
        build_utils.write_dep_file(
            args.depfile,
            build_utils.get_python_dependencies())


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
