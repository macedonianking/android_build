import("//gn/build/config/config.gni")

if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  if (target_os == "android") {
    target_cpu = "arm"
  } else {
    target_cpu = host_cpu
  }
}

if (current_os == "") {
  current_os = target_os
}
if (current_cpu == "") {
  current_cpu = target_cpu
}

# ====================================================================================
# DECLARE BUILD ARGUMENTS
# ====================================================================================

declare_args() {
  is_debug = true

  host_toolchain = ""

  custom_toolchain = ""
}

# ====================================================================================
# TOOLCHAIN SETUP
# ====================================================================================

# 设置运行系统使用的工具链
if (host_toolchain == "") {
  if (host_os == "win") {
    host_toolchain = "//gn/build/toolchain/win:$host_cpu"
  } else if (host_os == "linux") {
    host_toolchain = "//gn/build/toolchain/linux:$host_cpu"
  } else if (host_os == "mac") {
    host_toolchain = "//gn/build/toolchain/mac:$host_cpu"
  } else {
    assert(false, "Unsupported host_os: $host_os")
  }
}

_default_toolchain = ""

if (target_os == "android") {
  assert(host_os == "linux" || host_os == "mac" || host_os == "win")
  _default_toolchain = "//gn/build/toolchain/android:clang_$target_cpu"
} else if (target_os == "win") {
  _default_toolchain = "//gn/build/toolchain/win:$target_cpu"
} else if (target_os == "linux") {
  _default_toolchain = "//gn/build/toolchain/linux:$target_cpu"
} else {
  assert(false, "Unsupported target_os: $target_os")
}

if (custom_toolchain != "") {
  set_default_toolchain(custom_toolchain)
} else {
  set_default_toolchain(_default_toolchain)
}

# ====================================================================================
# OS DEFINITIONS
# ====================================================================================

if (current_os == "android") {
  is_android = true
  is_posix = true
  is_linux = false
  is_win = false
  is_mac = false
} else if (current_os == "win") {
  is_android = false
  is_posix = false
  is_linux = false
  is_win = true
  is_mac = false
} else if (current_os == "mac") {
  is_android = false
  is_posix = true
  is_win = false
  is_linux = false
  is_mac = true
} else if (current_os == "linux") {
  is_android = false
  is_posix = true
  is_win = false
  is_linux = true
  is_mac = false
} else {
  assert(false, "Unsupported current_os: $current_os")
}

import("//gn/build/config/config.gni")

# ====================================================================================
# SOURCES FILTERS
# ====================================================================================

sources_assignment_filster = []

if (!is_posix) {
  sources_assignment_filster += [
    "*_posix.h",
    "*_posix.c",
    "*_posix.cc",
    "*\bposix/*",
  ]
}
if (!is_linux) {
  sources_assignment_filster += [
    "*_linux.h",
    "*_linux.c",
    "*_linux.cc",
    "*\blinux/*",
  ]
}
if (!is_win) {
  sources_assignment_filster += [
    "*_win.h",
    "*_win.c",
    "*_win.cc",
    "*\bwin/*",
  ]
}
if (!is_mac) {
  sources_assignment_filster += [
    "*_mac.h",
    "*_mac.c",
    "*_mac.cc",
    "*\bmac/*",
  ]
}
if (!is_android) {
  sources_assignment_filster += [
    "*_android.h",
    "*_android.c",
    "*_android.cc",
    "*\bandroid/*",
  ]
}

set_sources_assignment_filter(sources_assignment_filster)

# ====================================================================================
# TARGETS DEFAULTS
# ====================================================================================

_native_compiler_configs = [
  "//gn/build/config:feature_flags",
  "//gn/build/config/compiler:compiler",
  "//gn/build/config/compiler:default_include_dirs",
]

if (is_debug) {
  _native_compiler_configs += [ "//gn/build/config:debug" ]
} else {
  _native_compiler_configs += [ "//gn/build/config:release" ]
}

_executable_configs =
    _native_compiler_configs + [ "//gn/build/config:default_libs" ]

set_defaults("executable") {
  configs = _executable_configs
}

_shared_library_configs = _native_compiler_configs + [
                            "//gn/build/config:default_libs",
                            "//gn/build/config:shared_library_config",
                          ]

set_defaults("shared_library") {
  configs = _shared_library_configs
}

set_defaults("static_library") {
  configs = _native_compiler_configs
}
